# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

workflows:
  IPS-Documentation:
    jobs:
      - envs:
          filters:
            branches:
              ignore:
                - /production.*/
      - test:
          requires:
            - envs
          filters:
            branches:
              ignore:
                - /production.*/
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master

version: 2.1
jobs:
  envs:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.2
        environment:
          PIPENV_VENV_IN_PROJECT: "enabled"
          #DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      # Download and cache dependencies
      - restore_cache:
          keys:
            - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - deps9-{{ .Branch }}-

      - run:
          name: Install dependencies
          command: |
            sudo pip install pipenv
            pipenv install
      
      - run:
          name: Copy scripts and persist workspace
          command: |
            mkdir -p ~/tmp/scripts
            cp -r ./scripts/* ~/tmp/scripts/

      - save_cache:
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - persist_to_workspace:
          root: ~/
          paths: 
            - tmp
            - repo

  test:
    docker:
      - image: circleci/python:3.7.4
        environment:
          PIPENV_VENV_IN_PROJECT: "enabled"
    working_directory: ~/repo
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Test Environment
          command: |
            pwd
            pipenv run pip freeze
            ls ~/tmp/scripts

  deploy:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.4
        environment:
          PIPENV_VENV_IN_PROJECT: "enabled"
    working_directory: ~/production
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/

      - checkout
      - run:
          name: Remove all files in production
          command: |
            git checkout production
            rm -r ./*

      - run:
          name: Convert ipynb to Markdown in a production folder
          command: |
            cd ~/repo
            bash ~/tmp/scripts/convert-ipynb-to-md.sh -o ~/production
      
      - run:
          name: Copy necessary files into production folder
          command: |
            cd ~/repo
            cp -r ./.circleci ~/production
            cp -r ./assets ~/production
            cp -r ./SUMMARY.md ~/production
            cp -r ./.gitignore ~/production

      - run:
          name: Push back to Github
          command: |
            git config user.name "$gitUser"
            git config user.email "$gitEmail"
            git add .
            git add -u
            git commit -m "convert ipynb to markdown"
            git push -u origin production